/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 15:25:50 GMT 2019
 */

package com.example.hellosustechbackend.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.example.hellosustechbackend.domain.User;
import com.example.hellosustechbackend.service.UserService;
import com.example.hellosustechbackend.status.Status;
import com.example.hellosustechbackend.web.UserAPI;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;


public class UserAPI_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserAPI userAPI0 = new UserAPI();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((Status) null).when(userService0).modifyClassTable(anyString() , anyInt() , anyInt());
      Injector.inject(userAPI0, (Class<?>) UserAPI.class, "userService", (Object) userService0);
      Injector.validateBean(userAPI0, (Class<?>) UserAPI.class);
      Status status0 = userAPI0.addClassTable((String) null, (-40), 0);
      assertNull(status0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserAPI userAPI0 = new UserAPI();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(userService0).getClassTable(anyString());
      Injector.inject(userAPI0, (Class<?>) UserAPI.class, "userService", (Object) userService0);
      Injector.validateBean(userAPI0, (Class<?>) UserAPI.class);
      Set<com.example.hellosustechbackend.domain.Class> set0 = userAPI0.getClassTable("\"RH-M e");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserAPI userAPI0 = new UserAPI();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((Status) null).when(userService0).login(any(User.class));
      Injector.inject(userAPI0, (Class<?>) UserAPI.class, "userService", (Object) userService0);
      Injector.validateBean(userAPI0, (Class<?>) UserAPI.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Status status0 = userAPI0.logIn(user0);
      assertNull(status0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserAPI userAPI0 = new UserAPI();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((Status) null).when(userService0).register(any(User.class));
      Injector.inject(userAPI0, (Class<?>) UserAPI.class, "userService", (Object) userService0);
      Injector.validateBean(userAPI0, (Class<?>) UserAPI.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Status status0 = userAPI0.register(user0);
      assertNull(status0);
  }
}

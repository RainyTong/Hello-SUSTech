/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 15:25:49 GMT 2019
 */

package com.example.hellosustechbackend.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.example.hellosustechbackend.service.MailAddressService;
import com.example.hellosustechbackend.status.Status;
import com.example.hellosustechbackend.web.MailAddressAPI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;


public class MailAddressAPI_ESTest  {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MailAddressAPI mailAddressAPI0 = new MailAddressAPI();
      MailAddressService mailAddressService0 = mock(MailAddressService.class, new ViolatedAssumptionAnswer());
      doReturn((Status) null).when(mailAddressService0).verifyCheckCode(anyString() , anyString());
      Injector.inject(mailAddressAPI0, (Class<?>) MailAddressAPI.class, "mailAddressService", (Object) mailAddressService0);
      Injector.validateBean(mailAddressAPI0, (Class<?>) MailAddressAPI.class);
      Status status0 = mailAddressAPI0.verifyCheckCode("<DYJ,FG,j{y", "");
      assertNull(status0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MailAddressAPI mailAddressAPI0 = new MailAddressAPI();
      Status status0 = mock(Status.class, new ViolatedAssumptionAnswer());
      MailAddressService mailAddressService0 = mock(MailAddressService.class, new ViolatedAssumptionAnswer());
      doReturn(status0).when(mailAddressService0).sendCheckCode(anyString());
      Injector.inject(mailAddressAPI0, (Class<?>) MailAddressAPI.class, "mailAddressService", (Object) mailAddressService0);
      Injector.validateBean(mailAddressAPI0, (Class<?>) MailAddressAPI.class);
      Status status1 = mailAddressAPI0.sendCheckCode((String) null);
      assertNull(status1);
  }
}

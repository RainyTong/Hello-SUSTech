/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 15:09:54 GMT 2019
 */

package com.example.hellosustechbackend.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.hellosustechbackend.api.BuildingRepository;
import com.example.hellosustechbackend.domain.Building;
import com.example.hellosustechbackend.service.BuildingService;
import com.example.hellosustechbackend.status.Status;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

public class BuildingService_ESTest {

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuildingService buildingService0 = new BuildingService();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(buildingRepository0).findAll();
      Injector.inject(buildingService0, (Class<?>) BuildingService.class, "buildingRepository", (Object) buildingRepository0);
      Injector.validateBean(buildingService0, (Class<?>) BuildingService.class);
      List<Building> list0 = buildingService0.getAllBuilding();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BuildingService buildingService0 = new BuildingService();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(buildingRepository0).findBuildingByName(anyString());
      Injector.inject(buildingService0, (Class<?>) BuildingService.class, "buildingRepository", (Object) buildingRepository0);
      Injector.validateBean(buildingService0, (Class<?>) BuildingService.class);
      // Undeclared exception!
      try { 
        buildingService0.getBuilding("$0^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.hellosustechbackend.service.BuildingService", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BuildingService buildingService0 = new BuildingService();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(buildingService0, (Class<?>) BuildingService.class, "buildingRepository", (Object) buildingRepository0);
      Injector.validateBean(buildingService0, (Class<?>) BuildingService.class);
      BuildingService buildingService1 = new BuildingService();
      BuildingRepository buildingRepository1 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(buildingRepository1).findBuildingByName(anyString());
      Injector.inject(buildingService1, (Class<?>) BuildingService.class, "buildingRepository", (Object) buildingRepository1);
      Injector.validateBean(buildingService1, (Class<?>) BuildingService.class);
      // Undeclared exception!
      try { 
        buildingService1.getBuilding(" %DN(/j|ra&`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.hellosustechbackend.service.BuildingService", e);
      }
  }
}

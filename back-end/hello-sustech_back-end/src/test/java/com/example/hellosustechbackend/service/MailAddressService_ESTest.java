/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 15:10:15 GMT 2019
 */

package com.example.hellosustechbackend.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.hellosustechbackend.api.MailAddressRepository;
import com.example.hellosustechbackend.service.MailAddressService;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

public class MailAddressService_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MailAddressService mailAddressService0 = new MailAddressService();
      MailAddressRepository mailAddressRepository0 = mock(MailAddressRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(mailAddressRepository0).findByMailAddress(anyString());
      Injector.inject(mailAddressService0, (Class<?>) MailAddressService.class, "mailAddressRepository", (Object) mailAddressRepository0);
      Injector.validateBean(mailAddressService0, (Class<?>) MailAddressService.class);
      // Undeclared exception!
      try { 
        mailAddressService0.verifyCheckCode("Check code: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.hellosustechbackend.service.MailAddressService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MailAddressService mailAddressService0 = new MailAddressService();
      MailAddressRepository mailAddressRepository0 = mock(MailAddressRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(mailAddressRepository0).findByMailAddress(anyString());
      Injector.inject(mailAddressService0, (Class<?>) MailAddressService.class, "mailAddressRepository", (Object) mailAddressRepository0);
      Injector.validateBean(mailAddressService0, (Class<?>) MailAddressService.class);
      // Undeclared exception!
      try { 
        mailAddressService0.sendCheckCode("Hello SUSTCech Check Code");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.hellosustechbackend.service.MailAddressService", e);
      }
  }
}

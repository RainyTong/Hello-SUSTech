/*
 * This file was automatically generated by EvoSuite
 * Fri May 24 15:10:26 GMT 2019
 */

package com.example.hellosustechbackend.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.hellosustechbackend.api.ClassRepository;
import com.example.hellosustechbackend.api.UserRepository;
import com.example.hellosustechbackend.domain.User;
import com.example.hellosustechbackend.service.UserService;
import com.example.hellosustechbackend.status.Status;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

public class UserService_ESTest{

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserService userService0 = new UserService();
      ClassRepository classRepository0 = mock(ClassRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "classRepository", (Object) classRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(userRepository0).findUserByUsername(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn(" /XGUI!KS").when(user0).getUsername();
      // Undeclared exception!
      try { 
        userService0.register(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.hellosustechbackend.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserService userService0 = new UserService();
      ClassRepository classRepository0 = mock(ClassRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "classRepository", (Object) classRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      // Undeclared exception!
      try { 
        userService0.login((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.hellosustechbackend.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserService userService0 = new UserService();
      ClassRepository classRepository0 = mock(ClassRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "classRepository", (Object) classRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(userRepository0).findUserByUsername(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Status status0 = userService0.modifyClassTable("", 0, 0);
      assertNull(status0.getDescription());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserService userService0 = new UserService();
      ClassRepository classRepository0 = mock(ClassRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "classRepository", (Object) classRepository0);
      Integer integer0 = new Integer(22);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(userRepository0).findUserByMailAddress(anyString());
      doReturn((List) null).when(userRepository0).findUserByUsername(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getMailAddress();
      doReturn((String) null).when(user0).getPassword();
      doReturn((String) null).when(user0).getUsername();
      // Undeclared exception!
      try { 
        userService0.register(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.hellosustechbackend.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserService userService0 = new UserService();
      ClassRepository classRepository0 = mock(ClassRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "classRepository", (Object) classRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(userRepository0).findUserByMailAddress(anyString());
      doReturn((List) null).when(userRepository0).findUserByUsername(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getMailAddress();
      doReturn("").when(user0).getPassword();
      doReturn((String) null).when(user0).getUsername();
      Status status0 = userService0.register(user0);
      assertFalse(status0.isResult());
      assertEquals("Error: Password must at least 8 characters", status0.getDescription());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UserService userService0 = new UserService();
      ClassRepository classRepository0 = mock(ClassRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "classRepository", (Object) classRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(userRepository0).findUserByMailAddress(anyString());
      doReturn((List) null).when(userRepository0).findUserByUsername(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(user0).getMailAddress();
      doReturn((String) null).when(user0).getUsername();
      Status status0 = userService0.login(user0);
      assertFalse(status0.isResult());
      assertEquals("Error: No User", status0.getDescription());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UserService userService0 = new UserService();
      ClassRepository classRepository0 = mock(ClassRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userService0, (Class<?>) UserService.class, "classRepository", (Object) classRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(userRepository0).findUserByUsername(anyString());
      Injector.inject(userService0, (Class<?>) UserService.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userService0, (Class<?>) UserService.class);
      Set<com.example.hellosustechbackend.domain.Class> set0 = userService0.getClassTable("");
      assertNull(set0);
  }
}
